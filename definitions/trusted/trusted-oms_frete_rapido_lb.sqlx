config {
	dependencies: ["oms_frete_rapido_lb"],
	tags: ["postgresql", "oms", "oms-full"]
}

MERGE
`TRUSTED.oms_frete_rapido_lb` T 
USING
(
WITH
TABELA AS (
SELECT
DISTINCT CAST(order_id AS INT64) AS order_id,
    vtex_order_id,
    contract_reference,
    CAST(offer AS INT64) AS offer,
    transp_cnpj,
    CAST(charged_shipping_value AS NUMERIC) AS charged_shipping_value,
    CAST(estimated_delivery_date AS TIMESTAMP) AS estimated_delivery_date,
    response_json,
    CAST(courier_type_id AS INT64) AS courier_type_id
FROM
`RAW.oms_frete_rapido_lb` A 
WHERE
PARTITIONTIME=(
SELECT
	MAX(PARTITIONTIME) 
FROM
	`RAW.oms_frete_rapido_lb`))
SELECT
*
FROM
TABELA) S
ON
T.order_id = S.order_id
WHEN MATCHED THEN UPDATE SET      
	T.order_id = S.order_id,
    T.vtex_order_id = S.vtex_order_id,
    T.contract_reference = S.contract_reference,
    T.offer = S.offer,
    T.transp_cnpj = S.transp_cnpj,
    T.charged_shipping_value = S.charged_shipping_value,
    T.estimated_delivery_date = S.estimated_delivery_date,
    T.response_json = S.response_json,
    T.courier_type_id = S.courier_type_id
WHEN NOT MATCHED 
THEN
INSERT 
(   order_id,
    vtex_order_id,
    contract_reference,
    offer,
    transp_cnpj,
    charged_shipping_value,
    estimated_delivery_date,
    response_json,
    courier_type_id  ) 
VALUES
(
	 S.order_id,
    S.vtex_order_id,
    S.contract_reference,
    S.offer,
    S.transp_cnpj,
    S.charged_shipping_value,
    S.estimated_delivery_date,
    S.response_json,
    S.courier_type_id  ) ;