config {
	dependencies: ["oms_contested_items_lb"],
	tags: ["postgresql", "oms"]
}

MERGE
`TRUSTED.oms_contested_items_lb` T 
USING
(
WITH
TABELA AS (
SELECT
DISTINCT CAST(id AS INT64) AS id,
CAST(order_id AS INT64) AS order_id,
CAST(sequence AS INT64) AS sequence,
sku_lb,
CAST(original_quantity AS INT64) AS original_quantity,
CAST(confered_quantity AS INT64) AS confered_quantity,
CAST(inventory AS INT64) AS inventory,
CAST(contest_description AS STRING) AS contest_description,
CAST(stock_adjustment AS BOOL) AS stock_adjustment,
CAST(adjustment_date AS TIMESTAMP) AS adjustment_date,
CAST(inventory_found AS INT64) AS inventory_found
FROM
`RAW.oms_contested_items_lb` A 
WHERE
PARTITIONTIME=(
SELECT
	MAX(PARTITIONTIME) 
FROM
	`RAW.oms_contested_items_lb`))
SELECT
*
FROM
TABELA) S
ON
T.id = S.id
WHEN MATCHED THEN UPDATE SET      
T.id = S.id,
T.order_id = S.order_id,
T.sequence = S.sequence,
T.sku_lb = S.sku_lb,
T.original_quantity = S.original_quantity,
T.confered_quantity = S.confered_quantity,
T.inventory = S.inventory,
T.contest_description = S.contest_description,
T.stock_adjustment = S.stock_adjustment,
T.adjustment_date = S.adjustment_date,
T.inventory_found = S.inventory_found 
WHEN NOT MATCHED 
THEN
INSERT 
(   id,
	order_id,
	sequence,
	sku_lb,
	original_quantity,
	confered_quantity,
	inventory,
	contest_description,
	stock_adjustment,
	adjustment_date,
	inventory_found  ) 
VALUES
(
	S.id,
	S.order_id,
	S.sequence,
	S.sku_lb,
	S.original_quantity,
	S.confered_quantity,
	S.inventory,
	S.contest_description,
	S.stock_adjustment,
	S.adjustment_date,
	S.inventory_found  ) 
WHEN NOT MATCHED BY SOURCE
THEN
DELETE 
;